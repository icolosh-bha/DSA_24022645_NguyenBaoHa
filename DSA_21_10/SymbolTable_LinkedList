
#include <bits/stdc++.h>
using namespace std;

template <typename Key, typename Value>
struct Node {
    Key key;
    Value value;
    Node* next;

    Node(Key k, Value v) : key(k), value(v), next(NULL) {}
};

template <typename Key, typename Value>
struct SymbolTable {
    Node<Key, Value>* head;
    int count;

    SymbolTable() {
        head = NULL;
        count = 0;
    }

    bool isEmpty() {
        return count == 0;
    }

    int size() {
        return count;
    }

    bool contains(Key key) {
        Node<Key, Value>* temp = head;
        while (temp != NULL) {
            if (temp->key == key)
                return true;
            temp = temp->next;
        }
        return false;
    }

    Value* get(Key key) {
        Node<Key, Value>* temp = head;
        while (temp != NULL) {
            if (temp->key == key)
                return &(temp->value);
            temp = temp->next;
        }
        return nullptr; // null pointer
    }

    void put(Key key, Value val) {
        Node<Key, Value>* temp = head;
        while (temp != NULL) {
            if (temp->key == key) {
                temp->value = val; // ghi đè
                return;
            }
            temp = temp->next;
        }

        Node<Key, Value>* newNode = new Node<Key, Value>(key, val);
        newNode->next = head;
        head = newNode;
        count++;
    }

    void deleteKey(Key key) {
        if (isEmpty()) {
            return;
        }
        Node<Key, Value>* temp = head;
        Node<Key, Value>* prev = NULL;
        while (temp != NULL) {
            if (temp->key == key) {
                if (prev == NULL)
                    head = temp->next;
                else
                    prev->next = temp->next;
                delete temp;
                count--;
                return;
            }
            prev = temp;
            temp = temp->next;
        }
    }

    void print() {
        Node<Key, Value>* temp = head;
        while (temp != NULL) {
            cout << temp->key << " -> " << temp->value << endl;
            temp = temp->next;
        }
    }
};

int main() {
    // Ví dụ 1: Key = string, Value = int
    SymbolTable<string, int> st1;
    st1.put("Alice", 90);
    st1.put("Bob", 75);
    st1.put("Charlie", 85);
    st1.print();
    cout << endl;

    // Ghi đè giá trị Bob
    st1.put("Bob", 100);
    cout << "Cap nhat Bob:\n";
    st1.print();

    // Kiểm tra get()
    auto val = st1.get("Alice");
    if (val != nullptr)
        cout << "\nAlice co diem: " << *val << endl;
    else
        cout << "\nKhong tim thay Alice!\n";

    // Ví dụ 2: Key = int, Value = string
    SymbolTable<int, string> st2;
    st2.put(1, "One");
    st2.put(2, "Two");
    st2.put(3, "Three");
    cout << "\nBang SymbolTable<int, string>:\n";
    st2.print();
}
